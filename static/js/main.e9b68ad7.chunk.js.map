{"version":3,"sources":["logo.svg","components/button.tsx","components/container.tsx","components/score.tsx","App.js","reportWebVitals.js","index.js"],"names":["Button","props","highlight","class","url","audio","Audio","useState","isPlaying","setIsplaying","useEffect","play","pause","disabled","running","iterating","current","setTimeout","document","querySelector","setAttribute","className","onClick","updatePlayerSequence","handleClick","generateSequence","sequence","min","max","rand","Math","floor","random","push","Container","setSequence","setIndex","playerSequence","setPlayerSequence","setRunning","setCurrent","clickCounter","setClickCounter","strict","setStrict","winner","setWinner","setIterating","i","interval","setInterval","console","log","length","clearInterval","iterateSequence","idx","updateScore","reset","value","prevstate","Array","map","x","ScoreBoard","score","App","setScore","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e9b68ad7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from \"react\";\r\n\r\nconst Button = (props: any) => {\r\n    let highlight = `button-${props.class}`;\r\n    const url = `https://s3.amazonaws.com/freecodecamp/simonSound${props.class + 1}.mp3`\r\n    const audio = new Audio(url)\r\n    const [isPlaying, setIsplaying] = useState(false)\r\n    useEffect(() => {\r\n        isPlaying ? audio.play() : audio.pause();\r\n    }, [isPlaying]);\r\n    const disabled = props.running ? props.iterating : true\r\n    if (props.current === props.class) {\r\n        setTimeout(() => {\r\n            setIsplaying(true)\r\n            document.querySelector(`.button-${props.current}`)?.setAttribute('class', `button-${props.current}-highlight`)\r\n        }, 300);\r\n        setTimeout(() => {\r\n            setIsplaying(false)\r\n            document.querySelector(`.button-${props.current}-highlight`)?.setAttribute('class', `button-${props.current}`)\r\n        }, 1000);\r\n    }\r\n    const handleClick = (props: any) => {\r\n        setIsplaying(true)\r\n        props.updatePlayerSequence(props.class)\r\n        setTimeout(() => {\r\n            setIsplaying(false)\r\n        }, 1000);\r\n    }\r\n    return (\r\n        <button disabled={disabled}\r\n            className={highlight}\r\n            onClick={() => handleClick(props)}\r\n        >\r\n            button {props.class}\r\n        </button>\r\n    );\r\n};\r\nexport default Button;\r\n","import { useEffect, useState } from \"react\";\r\nimport Button from \"./button\";\r\nconst Container = (props: any) => {\r\n    const [sequence, setSequence] = useState<number[]>([]);\r\n    const [index, setIndex] = useState(0);\r\n    const [playerSequence, setPlayerSequence] = useState<number[]>([]);\r\n    const [running, setRunning] = useState(false);\r\n    const [current, setCurrent] = useState<number>();\r\n    const [clickCounter, setClickCounter] = useState<number>(0)\r\n    const [strict, setStrict] = useState(false)\r\n    const [winner, setWinner] = useState(false)\r\n    const [iterating, setIterating] = useState(false)\r\n\r\n    // useEffect(() => {\r\n    //     setRunning(true)\r\n    // }, [running])\r\n    useEffect(() => {\r\n        const iterateSequence = (sequence: number[]) => {\r\n            let i = 0\r\n            if (running) {\r\n                setIterating(true)\r\n                const interval = setInterval(() => {\r\n                    setCurrent(sequence[i++]);\r\n                    // hack to force rerender\r\n                    console.log('i', i)\r\n                    setIndex(i)\r\n                    if (i === sequence.length + 1) {\r\n                        // i = 0\r\n                        console.log('inter', interval)\r\n                        clearInterval(interval)\r\n                        setIterating(false)\r\n                    }\r\n                }, 1000);\r\n                // clearInterval(interval)\r\n\r\n            }\r\n        };\r\n        iterateSequence(sequence)\r\n\r\n    }, [running, sequence])\r\n    useEffect(() => {\r\n        let idx = clickCounter - 1\r\n        if (playerSequence.length > 0) {\r\n            if (clickCounter > 0 && playerSequence[idx] && playerSequence[idx] !== sequence[idx]) {\r\n                setPlayerSequence([])\r\n                setClickCounter(0)\r\n                setSequence([...sequence])\r\n                if (strict) {\r\n                    setSequence(generateSequence([]))\r\n                }\r\n            } if (playerSequence.length === sequence.length) {\r\n                props.updateScore(sequence.length)\r\n                setSequence(generateSequence(sequence))\r\n                setPlayerSequence([])\r\n                setClickCounter(0)\r\n            } if (playerSequence.length === 20) {\r\n                console.log('winner')\r\n                setWinner(true)\r\n                reset()\r\n            }\r\n        }\r\n    }, [playerSequence])\r\n    // useEffect(() => {\r\n\r\n    // }, [index, sequence.length])\r\n    const updatePlayerSequence = (value: number) => {\r\n        setPlayerSequence(prevstate => [...prevstate, value])\r\n        setClickCounter(prevstate => prevstate + 1)\r\n    }\r\n    const reset = () => {\r\n        setSequence(generateSequence([]))\r\n        setClickCounter(0)\r\n        setPlayerSequence([])\r\n        setRunning(false)\r\n    }\r\n    const handleClick = () => {\r\n        if (running) {\r\n            console.log('reset')\r\n            setWinner(false)\r\n            reset()\r\n        } else {\r\n            setRunning(true);\r\n            setWinner(false)\r\n            setSequence(generateSequence([]));\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"button-container\">\r\n            {[...Array(4)].map((x, i) => (\r\n                <Button class={i} key={i} current={current}  running={running} iterating={iterating} updatePlayerSequence={updatePlayerSequence} />\r\n            ))}\r\n            <button\r\n                onClick={() => handleClick()}\r\n            >\r\n                {!running ?\r\n                    <p>start</p> :\r\n                    <p>reset</p>\r\n                }\r\n            </button>\r\n            <button\r\n                onClick={() => setStrict(prevstate => !prevstate)}\r\n            >\r\n                {!strict ?\r\n                    <p>strict:true</p> :\r\n                    <p>s:false</p>\r\n                }\r\n            </button>\r\n            {winner && <p>winner</p>}\r\n        </div >\r\n    );\r\n};\r\nconst randomInt = (min: number, max: number) => {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\nconst generateSequence = (sequence: any[]) => {\r\n    sequence = [...sequence]\r\n    const rand = randomInt(0, 3);\r\n    sequence.push(rand);\r\n    return sequence;\r\n};\r\n\r\nexport default Container;\r\n","const ScoreBoard = (props: { score: number }) => {\r\n    return (\r\n        <div>\r\n            <p>score: {props.score}</p>\r\n        </div>\r\n    )\r\n}\r\nexport default ScoreBoard","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Container from \"./components/container\";\nimport ScoreBoard from \"./components/score\";\nimport { useState } from \"react\";\nfunction App() {\n  const [score, setScore] = useState(0);\n  const updateScore = (score) => {\n    setScore(score);\n  };\n  return (\n    <div className=\"App\">\n      <Container updateScore={updateScore} />\n      <ScoreBoard score={score} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}